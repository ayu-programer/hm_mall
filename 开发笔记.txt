商品分类查询
	商品分类表设计注意点：商品分类是分层级的，如何区分儿子和爹的关系，就是在表中添加一个parentID字段

	通用mapper会把对象中的非空属性作为查询条件
	问题整体解决思路：
	    通过前端请求，分析请求方式（post，get..）,请求路径（http://api.leyou.com/api/item/category/list?pid=0）请求参数（pid），返回类型（是个json数组）
        进而来设计和构造controller和业务层

	利用cors解决跨域问题
	    具体使用：在网关中加入GlobalCorsConfig，添加跨域信息，定义请求方式，头信息等

商品的品牌管理和查询
    数据库设计的时候注意，tb_category_brand用于商品分类和品牌之间的关联，同时这表里没有外键，为什么不加外键呢？为了提高电商系统的性能，因为外键关联会影响到商品的删除
    也会影响数据库的读写性能
    根据返回数据的特点：有个用brand对象包装的list还有个总条数，所以选择用对象来包装返回结果
    具体逻辑处理时：包括1 分页，2.过滤  3.排序  4.查询   5.解析分页结果

商品新增功能

商品的文件上传
    注意一点：由于文件上传在经过zuul网关时，再高并发时可能会导致网络阻塞，zuul网关不可用，所以我们在做文件上传时最好绕过请求的缓存（也会经过zuul网关，只是不会在缓存请求）
    解决方法：通过nginx的指令对地址进行重写，修改到以/zuul为前缀

文件上传下载的升级
    通过fastDFS进行小文件的上传下载
    将代码中的字符串，及变量配置到配置文件中去
    具体操作步骤：
        1 在application.yml文件中配置 hm.upload.baseUrl 和 hm.upload.allowTypes属性
        2 定义 UploadProperties属性类
        3 在UploadService中注入 UploadProperties属性类 并使用属性替代字符串

spu与sku的关系
	spu：标准产品单位
	sku：库存量单位
	spu是一个抽象的商品集概念，作用：为了方便后台管理，
	sku因具体特征不同而区分出的商品，sku是具体要销售的商品，用户购买的是sku
	每一个分类都有统一的规格参数模板，但不同商品其参数值可能不同
		商品分类与规格模板是一对一关系
		商品分类与商品spu是一对多关系
		规模模板与商品spu是一对多关系
		商品spu保存有规格参数的具体值
		因为sku的特有属性是商品规格参数的一部分，
		所以可以将规格参数中的属性划分为 SKU 通用规格与SKU特有规格
		所以 spu与sku是一对多关系
		spu保存着所有sku共享的规格属性
		sku中保存每个sku特有的规格属性


将库存表和sku表分开处理的目的？
	因为库存字段写频率较高，而sku的其他字段以读为主，因此我们将两张表分离，读写不会干扰
	sku表中的indexes字段是一个特有规格属性字段，它表示spu属性模板中的对应下标组合字段
	因为在spu表中其实已经对特有规格参数及可选项作了保存，我们在sku表中将不同的角标串联起来作为spu下不同
	sku的标识，这就是index字段；；；、



当前规格参数的显示应该是以能够查询到的所有商品为准，而不是以数据库中的所有查询区间
解决思路是查询数据库中的商品尺寸规格，然后处理成段，再覆盖原来的值


进行搜索时，存的其实是spu，以spu为单位，主要包括，图片，价格，标题，副标题；暗藏的数据：spu的id，sku的id
首先要编写分类和品牌查询的相关服务
当实现将数据库中的数据同步到索引库时 需要用到Feign（使用feign之后，我们调用eureka 注册的其他服务，在代码中就像各个service之间相互调用那么简单。）
同时要想再serach-service中获取品牌信息和分类等信息，如果直接在serach-service中定义接口这种做法不好，因为调用方无法知道被调用方的接口信息和参数，
这样也将两者绑定死了
如何来操作？
在被调用方的item-interface中定义接口信息，在serach-service中引入hm-interface的包，然后继承interface中的接口
@FeignClient(value = "item-service")
public interface GoodsClient extends GoodsApi {
}